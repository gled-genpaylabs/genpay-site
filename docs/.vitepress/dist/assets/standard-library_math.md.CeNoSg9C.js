import{_ as o,c as a,o as l,ae as i}from"./chunks/framework.B8KKhRA6.js";const b=JSON.parse('{"title":"@math","description":"","frontmatter":{},"headers":[],"relativePath":"standard-library/math.md","filePath":"standard-library/math.md"}'),t={name:"standard-library/math.md"};function c(d,e,n,s,r,f){return l(),a("div",null,e[0]||(e[0]=[i('<h1 id="math" tabindex="-1">@math <a class="header-anchor" href="#math" aria-label="Permalink to &quot;@math&quot;">​</a></h1><p>Basic mathematical module.</p><h2 id="struct-random" tabindex="-1"><code>struct Random</code> <a class="header-anchor" href="#struct-random" aria-label="Permalink to &quot;`struct Random`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn init() Random</code> <br> Initializes random seed and Random structure.</p></blockquote><hr><blockquote><p><code>fn random(from: i32, to: i32) i32</code> <br> Returns pseudo-random number in provided range.</p></blockquote><h2 id="struct-math" tabindex="-1"><code>struct Math</code> <a class="header-anchor" href="#struct-math" aria-label="Permalink to &quot;`struct Math`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn PI() f64</code> <br> PI Number Constant.</p></blockquote><hr><blockquote><p><code>fn E() f64</code> <br> Euler Number Constant.</p></blockquote><hr><blockquote><ul><li><code>fn abs(value: i64) i64</code></li><li><code>fn fabs(value: i64) i64</code></li><li><code>fn sign(value: i64) i64</code><br><br></li><li><code>fn min(a: i64, b: i64) i64</code></li><li><code>fn minf(a: f64, b: f64) i64</code><br><br></li><li><code>fn maxf(a: i64, b: i64) i64</code></li><li><code>fn maxf(a: f64, b: f64) f64</code><br><br></li><li><code>fn pow(base: i64, exponent: i64) i64</code></li><li><code>fn powf(base: f64, exponent: f64) f64</code><br><br></li><li><code>fn sqrt(value: i64) i64</code></li><li><code>fn sqrtf(value: f64) f64</code><br><br></li><li><code>fn cbrt(value: i64) i64</code></li><li><code>fn cbrtf(value: f64) f64</code></li></ul></blockquote><hr><blockquote><ul><li><code>fn exp(value: f64) f64</code></li><li><code>fn log(value: f64) f64</code></li><li><code>fn log2(value: f64) f64</code></li><li><code>fn log10(value: f64) f64</code></li></ul></blockquote><hr><blockquote><ul><li><code>fn ceil(value: f64) f64</code></li><li><code>fn floor(value: f64) f64</code></li><li><code>fn round(value: f64) f64</code></li></ul></blockquote><hr><blockquote><ul><li><code>fn sin(value: f64) f64</code></li><li><code>fn cos(value: f64) f64</code></li><li><code>fn tan(value: f64) f64</code></li><li><code>fn asin(value: f64) f64</code></li><li><code>fn acos(value: f64) f64</code></li><li><code>fn atan(value: f64) f64</code></li></ul></blockquote>',22)]))}const p=o(t,[["render",c]]);export{b as __pageData,p as default};
