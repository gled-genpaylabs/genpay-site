import{_ as e,c as a,o,ae as s}from"./chunks/framework.B8KKhRA6.js";const h=JSON.parse('{"title":"@io","description":"","frontmatter":{},"headers":[],"relativePath":"standard-library/io.md","filePath":"standard-library/io.md"}'),r={name:"standard-library/io.md"};function i(n,t,d,c,l,p){return o(),a("div",null,t[0]||(t[0]=[s('<h1 id="io" tabindex="-1">@io <a class="header-anchor" href="#io" aria-label="Permalink to &quot;@io&quot;">​</a></h1><p>Standard input/output module. <br> Module Includes: <code>@string</code>, <code>@bytes</code></p><h2 id="struct-stdin" tabindex="-1"><code>struct Stdin</code> <a class="header-anchor" href="#struct-stdin" aria-label="Permalink to &quot;`struct Stdin`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn read_line(buffer: *String)</code> <br> Reads line from <em>stdin</em> to dynamic string buffer.</p></blockquote><hr><blockquote><p><code>fn getchar() char</code> <br> Reads character from <em>stdin</em> and returns it.</p></blockquote><h2 id="struct-stdout" tabindex="-1"><code>struct Stdout</code> <a class="header-anchor" href="#struct-stdout" aria-label="Permalink to &quot;`struct Stdout`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn print(input: *char)</code> <br> Prints raw string to <em>stdout</em></p></blockquote><hr><blockquote><p><code>fn println(input: *char)</code> <br> Prints raw string with new line to <em>stdout</em></p></blockquote><hr><blockquote><p><code>fn flush()</code> <br> Flushes <em>stdout buffer</em></p></blockquote><h2 id="struct-stderr" tabindex="-1"><code>struct Stderr</code> <a class="header-anchor" href="#struct-stderr" aria-label="Permalink to &quot;`struct Stderr`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><blockquote><p><code>fn print(input: *char)</code> <br> Prints raw string to <em>stderr</em></p></blockquote><hr><blockquote><p><code>fn println(input: *char)</code> <br> Prints raw string with new line to <em>stderr</em></p></blockquote><hr><blockquote><p><code>fn flush()</code> <br> Flushes <em>stderr buffer</em></p></blockquote>',23)]))}const b=e(r,[["render",i]]);export{h as __pageData,b as default};
