import{_ as o,c as t,o as r,ae as i}from"./chunks/framework.B8KKhRA6.js";const m=JSON.parse('{"title":"Compiler Macros","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/compiler-macros.md","filePath":"advanced/compiler-macros.md"}'),l={name:"advanced/compiler-macros.md"};function c(a,e,p,d,n,s){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="compiler-macros" tabindex="-1">Compiler Macros <a class="header-anchor" href="#compiler-macros" aria-label="Permalink to &quot;Compiler Macros&quot;">â€‹</a></h1><p><strong>Compiler Macros</strong> are a helpful tool from the compiler, which allow you to get the compiler&#39;s help with operating on data.</p><p><strong>List of Genpay macros:</strong></p><ul><li><strong><code>print!(LITERAL_FORMAT, ...) void</code></strong> - Prints formatted input without a new line to standard output.</li></ul><p>Example: <code>print!(&quot;2 + 2{}&quot;, 2 + 2)</code></p><hr><ul><li><strong><code>println!(LITERAL_FORMAT, ...) void</code></strong> - Prints formatted input with a new line to standard output.</li></ul><p>Example: <code>println!(&quot;Hello, {}!&quot;, &quot;World&quot;)</code></p><hr><ul><li><strong><code>format!(LITERAL_FORMAT, ...) *char</code></strong> - Returns a formatted string from provided input.</li></ul><p>Example: <code>format!(&quot;Number: {}&quot;, 5)</code></p><hr><ul><li><strong><code>panic!(LITERAL_FORMAT, ...) void</code></strong> - Calls the compiler&#39;s runtime panic with formatted input.</li></ul><p>Example: <code>panic!(&quot;Oops! Looks {}&quot;, &quot;bad&quot;)</code></p><hr><ul><li><strong><code>sizeof!(EXPRESSION / BASIC_TYPE) usize</code></strong> - Returns the size (in bytes) of the provided expression or basic type.</li></ul><p>Example: <code>sizeof!(i32)</code></p><hr><ul><li><strong><code>cast!(EXPRESSION, TYPE) TYPE</code></strong> - Casts an expression to the targeted type.</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">Allowed Types Casts</p><p></p><ul><li><code>integer type -&gt; integer type</code></li><li><code>integer type -&gt; float type</code></li><li><code>integer type -&gt; char</code></li><li><code>integer type -&gt; bool</code></li><li><code>integer type -&gt; pointer type</code></li></ul><hr><ul><li><code>float type -&gt; float type</code></li><li><code>float type -&gt; integer type</code></li></ul><hr><ul><li><code>char -&gt; integer type</code></li><li><code>bool -&gt; integer type</code></li><li><code>pointer type -&gt; integer type</code></li><li><code>pointer type -&gt; pointer type</code></li></ul></div><p>Example: <code>cast!(10, f64)</code></p>',21)]))}const g=o(l,[["render",c]]);export{m as __pageData,g as default};
