import{_ as e,c as a,o as i,ae as n}from"./chunks/framework.B8KKhRA6.js";const k=JSON.parse('{"title":"@fs","description":"","frontmatter":{},"headers":[],"relativePath":"standard-library/fs.md","filePath":"standard-library/fs.md"}'),t={name:"standard-library/fs.md"};function l(r,s,o,p,d,h){return i(),a("div",null,s[0]||(s[0]=[n(`<h1 id="fs" tabindex="-1">@fs <a class="header-anchor" href="#fs" aria-label="Permalink to &quot;@fs&quot;">​</a></h1><p>File System interaction module. <br> Module Includes: <code>@string</code>, <code>@bytes</code></p><h2 id="enum-fserror" tabindex="-1"><code>enum FSError</code> <a class="header-anchor" href="#enum-fserror" aria-label="Permalink to &quot;\`enum FSError\`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  WriteableModeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ReadableModeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  StdlibException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  NullFileBuffer</span></span></code></pre></div><h2 id="enum-filemode" tabindex="-1"><code>enum FileMode</code> <a class="header-anchor" href="#enum-filemode" aria-label="Permalink to &quot;\`enum FileMode\`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ReadBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  WriteBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  AppendBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ReadWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ReadAppend</span></span></code></pre></div><h2 id="struct-modehandler" tabindex="-1"><code>struct ModeHandler</code> <a class="header-anchor" href="#struct-modehandler" aria-label="Permalink to &quot;\`struct ModeHandler\`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// PRIVATE STRUCTURE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn specify(mode: FileMode) *char</code> <br> Specifies filemode to C format</p></blockquote><h2 id="struct-modehandler-1" tabindex="-1"><code>struct ModeHandler</code> <a class="header-anchor" href="#struct-modehandler-1" aria-label="Permalink to &quot;\`struct ModeHandler\`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No fields</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn specify(err: FSError) *char</code> <br> Specifies filesystem error to human readable.</p></blockquote><h2 id="struct-file" tabindex="-1"><code>struct File</code> <a class="header-anchor" href="#struct-file" aria-label="Permalink to &quot;\`struct File\`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mode: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FileMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is_open: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error_state: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FSError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">usize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*void</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn open(filename: *char, mode: FileMode) File</code> <br> Opens provided file. Opened and error status are in <em><code>is_open</code></em> and <em><code>error_state</code></em> fields.</p></blockquote><hr><blockquote><p><code>fn close(&amp;self) FSError</code> <br> Closes file buffer and returns status.</p></blockquote><hr><blockquote><p><code>fn opened(&amp;self) bool</code> <br> Returns if file is opened.</p></blockquote><hr><blockquote><p><code>fn size(&amp;self) usize</code> <br> Returns opened file size.</p></blockquote><hr><blockquote><p><code>fn get_error(&amp;self) FSError</code> <br> Returns current error state.</p></blockquote><hr><blockquote><p><code>fn specify_error(&amp;self) *char</code> <br> Specifies current error state to human readable.</p></blockquote><hr><blockquote><p><code>fn rewind(&amp;self)</code> <br> Rewinds file buffer if it open.</p></blockquote><hr><blockquote><p><code>fn get_char(&amp;self) char</code> <br> Reads character from file buffer. If it&#39;s closed or EOF returns <code>&#39;\\0&#39;</code></p></blockquote><hr><blockquote><p><code>fn read(&amp;self) Bytes</code> <br> Reads whole file to <em><code>Bytes</code></em> structure.</p></blockquote><hr><blockquote><p><code>fn read_string(&amp;self) String</code> <br> Reads whole file to <em><code>String</code></em> structure.</p></blockquote><hr><blockquote><p><code>fn write(&amp;self, bytes: *Bytes) FSError</code> <br> Writes bytes buffer to file and returns error state.</p></blockquote><hr><blockquote><p><code>fn write_string(&amp;self, value: *String) FSError</code> <br> Write dynamic string buffer to file and returns error state.</p></blockquote><hr><blockquote><p><code>fn write_str(&amp;self, value: *char) FSError</code> <br> Writes CStr value to file and returns error state.</p></blockquote><p><strong>Compiler Implementations:</strong></p><ul><li><code>fn drop(&amp;self)</code></li></ul><p>For more information see <a href="/advanced/structures-implementations.html">Structures Implementations</a></p>`,45)]))}const u=e(t,[["render",l]]);export{k as __pageData,u as default};
