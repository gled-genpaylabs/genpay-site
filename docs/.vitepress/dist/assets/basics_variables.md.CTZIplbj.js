import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.B8KKhRA6.js";const c=JSON.parse('{"title":"Variables","description":"","frontmatter":{},"headers":[],"relativePath":"basics/variables.md","filePath":"basics/variables.md"}'),t={name:"basics/variables.md"};function l(p,s,h,r,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h1><p><strong>Variables</strong> in Genpay are similar to those in languages like C, Rust, or even Gleam.</p><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h3><p><strong>Annotation:</strong></p><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> identifier: type;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> identifier: type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> identifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span></code></pre></div><p><strong>Assignation:</strong></p><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// default assignation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BINOP=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// binary assignation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// slice assignation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier.field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// field assignation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// dereference assignation</span></span></code></pre></div><p><strong>Expressions Usage:</strong></p><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// default load</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier[index] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// slice load</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier.field </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// field load</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// reference load</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identifier </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// dereference load</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><p>A variable is a pointer to temporary, stack-allocated data. It provides the means to load, change, or remove this data. When a variable goes out of scope, the backend automatically deallocates the data.</p><p>A pointer is also a stack-allocated value. Essentially, it is an usize integer value that contains the address of the pointed-to value.</p><div class="important custom-block github-alert"><p class="custom-block-title">NOTE THAT</p><p>The compiler will not allow you to create an uninitialized variable without an explicit type definition. <br> Code like <code>let var;</code> will throw semantical analyzer exception.</p></div><hr><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IMAGINE THIS IS STACK</span></span>
<span class="line"><span>| ... | 100 | ... | ... | 0x1 |</span></span>
<span class="line"><span>         |--------------------|---------&gt; let var = 100;</span></span>
<span class="line"><span>                              |---------&gt; let var_ptr = &amp;var;</span></span></code></pre></div>`,15)]))}const g=a(t,[["render",l]]);export{c as __pageData,g as default};
