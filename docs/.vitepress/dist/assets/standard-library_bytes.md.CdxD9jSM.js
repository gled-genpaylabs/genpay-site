import{_ as s,c as t,o as i,ae as a}from"./chunks/framework.B8KKhRA6.js";const h=JSON.parse('{"title":"@bytes","description":"","frontmatter":{},"headers":[],"relativePath":"standard-library/bytes.md","filePath":"standard-library/bytes.md"}'),o={name:"standard-library/bytes.md"};function n(r,e,l,p,c,d){return i(),t("div",null,e[0]||(e[0]=[a(`<h1 id="bytes" tabindex="-1">@bytes <a class="header-anchor" href="#bytes" aria-label="Permalink to &quot;@bytes&quot;">​</a></h1><p>Dynamic bytes buffer module. <br> Module Includes: <code>@string</code></p><h2 id="struct-bytes" tabindex="-1"><code>struct Bytes</code> <a class="header-anchor" href="#struct-bytes" aria-label="Permalink to &quot;\`struct Bytes\`&quot;">​</a></h2><div class="language-genpay vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">genpay</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*u8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">usize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">usize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iterator_ptr: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">usize</span></span></code></pre></div><p><strong>Methods:</strong></p><blockquote><p><code>fn new() Bytes</code> <br> Creates new empty bytes buffer.</p></blockquote><hr><blockquote><p><code>fn with_size(size: usize) Bytes</code> <br> Creates new empty bytes buffer with provided size.</p></blockquote><hr><blockquote><p><code>fn len(&amp;self) usize</code> <br> Returns bytes buffer length.</p></blockquote><hr><blockquote><p><code>fn push(&amp;self, value: u8)</code> <br> Pushes byte to buffer.</p></blockquote><hr><blockquote><p><code>fn pop(&amp;self) u8</code> <br> Removes latest byte from buffer and returns it.</p></blockquote><hr><blockquote><p><code>fn peek(&amp;self, position: usize) u8</code> <br> Returns byte from buffer on provided position. <code>0</code> if buffer is empty, panic on position overflow.</p></blockquote><hr><blockquote><p><code>fn set(&amp;self, position: usize, value: u8)</code> <br> Replaces byte on provided position with value. Nothing if buffer is empty, panic on position overflow.</p></blockquote><hr><blockquote><p><code>fn raw(&amp;self) *u8</code> <br> Returns raw pointer to buffer.</p></blockquote><p><strong>Compiler Implementations:</strong></p><ul><li><code>fn drop(&amp;self)</code></li><li><code>fn iterate(&amp;self) (char, bool)</code></li><li><code>fn slice(&amp;self, index: usize) char</code></li><li><code>fn slice_assign(&amp;self, index: usize, value: char)</code></li></ul>`,22)]))}const b=s(o,[["render",n]]);export{h as __pageData,b as default};
