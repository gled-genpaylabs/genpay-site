import{_ as d,c as e,o as r,ae as i}from"./chunks/framework.B8KKhRA6.js";const l=JSON.parse('{"title":"Types","description":"","frontmatter":{},"headers":[],"relativePath":"basics/types.md","filePath":"basics/types.md"}'),o={name:"basics/types.md"};function a(n,t,c,s,p,y){return r(),e("div",null,t[0]||(t[0]=[i('<h1 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">â€‹</a></h1><p>Types in Genpay are the main mechanism of memory management. <br> They allow the user to define specific data with a strict size. <br></p><p><strong>Table of Genpay Types:</strong></p><table tabindex="0"><thead><tr><th>Type</th><th>Description</th><th>Size (in bytes)</th><th>Designation</th></tr></thead><tbody><tr><td>i8</td><td>Signed 8-bit integer type</td><td>1</td><td><code>i8</code></td></tr><tr><td>i16</td><td>Signed 16-bit integer type</td><td>2</td><td><code>i16</code></td></tr><tr><td>i32</td><td>Signed 32-bit integer type</td><td>4</td><td><code>i32</code></td></tr><tr><td>i64</td><td>Signed 64-bit integer type</td><td>8</td><td><code>i64</code></td></tr><tr><td>u8</td><td>Unsigned 8-bit integer type</td><td>1</td><td><code>u8</code></td></tr><tr><td>u16</td><td>Unsigned 16-bit integer type</td><td>2</td><td><code>u16</code></td></tr><tr><td>u32</td><td>Unsigned 32-bit integer type</td><td>4</td><td><code>u32</code></td></tr><tr><td>u64</td><td>Unsigned 64-bit integer type</td><td>8</td><td><code>u64</code></td></tr><tr><td>usize</td><td>Unsigned integer type for size definitions (typically equivalent to u64)</td><td>8</td><td><code>usize</code></td></tr><tr><td>char</td><td>8-bit unsigned integer type for character representation</td><td>1</td><td><code>char</code></td></tr><tr><td>*char</td><td>String type. Internally, this is just a pointer to a sequence of characters</td><td>-</td><td><code>*char</code></td></tr><tr><td>bool</td><td>1-bit integer boolean flag (0 - false, 1 - true)</td><td>1</td><td><code>bool</code></td></tr><tr><td>void</td><td>Void type, representing the absence of a value</td><td>0</td><td><code>void</code></td></tr><tr><td>array</td><td>Basic array type</td><td>-</td><td><code>[TYPE; SIZE]</code></td></tr><tr><td>tuple</td><td>Data structure that combines multiple types</td><td>-</td><td><code>(TYPE, TYPE, ...)</code></td></tr><tr><td>pointer</td><td>Pointer type for holding a reference to data</td><td>-</td><td><code>*TYPE</code></td></tr><tr><td>struct</td><td>Basic structure type</td><td>-</td><td><code>ALIAS</code></td></tr><tr><td>enum</td><td>Basic enumeration type</td><td>-</td><td><code>ALIAS</code></td></tr></tbody></table>',4)]))}const h=d(o,[["render",a]]);export{l as __pageData,h as default};
